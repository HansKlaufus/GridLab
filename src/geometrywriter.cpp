/********************************************************
*** Body file for definition of class clGeometryWriter
***
*** J.L. Klaufus - Cranfield 1999
**/

#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>

#include "exceptiontree.h"
#include "geometry.h"
#include "geometrywriter.h"
#include "matrix.h"
#include "node2d.h"
#include "surfacegrid.h"

using namespace std;

/*
**----------------
** Private methods
**----------------
*/

void clGeometryWriter::WriteTec(const clGeometry &geometry)
{
//  fstream f_out;
//
//  f_out.open(fileName, ios::out);
//  if (!f_out.good())
//  {
//    char message[MESLEN];
//    sprintf(message, "Could not open file for output.\n  FILE=%s", fileName);
//    throw clExceptionTree("clWriter", "WriteTec", message);
//  }
//
//  // Write file header
//  f_out << "TITLE = \"Generated by gridLab.\"" << endl;
//  f_out << "VARIABLES = \"X\", \"Y\", \"Z\"" << endl;
//
//  for(int s=0; s<geometry.GetNumberSurfaces(); s++)
//  {
//    int nu, nv;
//    cout << "Number of nodes in U-direction: "; cin >> nu;
//    cout << "Number of nodes in V-direction: "; cin >> nv;
//
//    clSurface     *surf = geometry.GetSurfacePointer(s);
//    clSurfaceGrid sGrid(s, gtUnstructured, dtUniform, nu, nv, *surf);
//
//    int numNodes    = sGrid.GetNumberNodes();
//    int numElements = sGrid.GetNumberFaces();
//
//    // Write zone
//    f_out << "ZONE N=" << numNodes << ", E=" << numElements << ", F=FEPOINT, ET=TRIANGLE" << endl;
//    // Write nodes
//    for(int n=0; n<numNodes; n++)
//    {
//      clNode2D  node  = sGrid.GetNode(n);
//      dMatrix   coord = node.GetCoordinates();
//
//      f_out << coord(1,1) << " " << coord(1,2) << " " << coord(1,3) << endl;
//    }
//    f_out << endl;
//
//    // Write connectivity
//    for(int e=0; e<numElements; e++)
//    {
//      clFace face        = sGrid.GetFace(e);
//      int    nodesInFace = face.GetNumberNodes();
//
//      for(int n=0; n<nodesInFace; n++)
//      {
//        f_out << face.GetNodeID(n)+1 << " ";
//      }
//      f_out << endl;
//    }
//    f_out << endl;
//  }
//
//  f_out.close();
}

void clGeometryWriter::WriteGnu(const clGeometry &geometry)
{
//  fstream f_out;
//
//  f_out.open(fileName, ios::out);
//  if (!f_out.good())
//  {
//    char message[MESLEN];
//    sprintf(message, "Could not open file for output.\n  FILE=%s", fileName);
//    throw clExceptionTree("clWriter", "WriteGnu", message);
//  }
//
//  for(int s=0; s<geometry.GetNumberSurfaces(); s++)
//  {
//    int nu, nv;
//    cout << "Number of nodes in U-direction: "; cin >> nu;
//    cout << "Number of nodes in V-direction: "; cin >> nv;
//
//    clSurface     *surf = geometry.GetSurfacePointer(s);
//    clSurfaceGrid sGrid(1, gtUnstructured, dtUniform, nu, nv, *surf);
//
//    for(int f=0; f<sGrid.GetNumberFaces(); f++)
//    {
//      clFace face = sGrid.GetFace(f);
//
//      for(int n=0; n<face.GetNumberNodes(); n++)
//      {
//        int     nodeEntry = face.GetNodeID(n);
//        clNode2D  node      = sGrid.GetNode(nodeEntry);
//        dMatrix coord     = node.GetCoordinates();
//
//        f_out << coord(1, 1) << " " << coord(1, 2) << " " << coord(1, 3) << endl;
//      }
//      int     nodeEntry = face.GetNodeID(0);
//      clNode2D  node      = sGrid.GetNode(nodeEntry);
//      dMatrix coord     = node.GetCoordinates();
//
//      f_out << coord(1, 1) << " " << coord(1, 2) << " " << coord(1, 3) << endl << endl << endl;
//    }
//    f_out << endl;
//  }
//
//  f_out.close();
}

/*
**---------------
** Public methods
**---------------
*/

/*
** Constructor and Destructor
*/

clGeometryWriter::clGeometryWriter(const char *fName, enFormat format, clGeometry &geometry)
{
  char tempName[50];
  strcpy(tempName, fName);

  switch(format)
  {
    case foGnu:
      fileName       = strdup(strcat(tempName, ".gnu"));
      fileNameLength = (int) (strlen(fileName));
      WriteGnu(geometry);
      break;
    case foTec:
      fileName       = strdup(strcat(tempName, ".tec"));
      fileNameLength = (int) (strlen(fileName));
      WriteTec(geometry);
      break;
    default:
      throw clExceptionTree("clGeometryWriter", "clGeometryWriter", "Unknown format specification.");
      break;
  }
}

clGeometryWriter::~clGeometryWriter(void)
{
  if(fileName) delete [] fileName;
}

